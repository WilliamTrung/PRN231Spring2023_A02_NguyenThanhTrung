// <auto-generated />
using System;
using BusinessObject.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Author", b =>
                {
                    b.Property<int>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("author_id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("author_id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            author_id = 1,
                            address = "237 Lê Văn Việt",
                            city = "Hồ Chí Minh",
                            email_address = "thanhtrung@gmai.com",
                            first_name = "Thanh Trung",
                            last_name = "Nguyen",
                            phone = "0908456789",
                            state = "Hồ Chí Minh",
                            zip = "700000"
                        },
                        new
                        {
                            author_id = 2,
                            address = "123 đường 1",
                            city = "Ha Noi",
                            email_address = "anhkhoa@gmail.com",
                            first_name = "Anh Khoa",
                            last_name = "Tran",
                            phone = "0908123456",
                            state = "Ha Noi",
                            zip = "123456"
                        });
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"), 1L, 1);

                    b.Property<string>("advanced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("money");

                    b.Property<DateTime>("published_date")
                        .HasColumnType("date");

                    b.Property<string>("royalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ytd_date")
                        .HasColumnType("date");

                    b.HasKey("book_id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            book_id = 1,
                            advanced = "",
                            note = "",
                            price = 300000m,
                            published_date = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            royalty = "Copyright of Author 1",
                            title = "The life of Author 1",
                            type = "Romantic",
                            ytd_date = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            book_id = 2,
                            advanced = "",
                            note = "",
                            price = 300000m,
                            published_date = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            royalty = "Copyright of Author 2",
                            title = "The adventure of Author 2",
                            type = "Adventure",
                            ytd_date = new DateTime(2022, 12, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BusinessObject.BookAuthor", b =>
                {
                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<string>("author_order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("royality_percentage")
                        .HasColumnType("int");

                    b.HasKey("author_id", "book_id");

                    b.HasIndex("author_id")
                        .IsUnique();

                    b.HasIndex("book_id");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            author_id = 1,
                            book_id = 1,
                            author_order = "",
                            royality_percentage = 60
                        },
                        new
                        {
                            author_id = 2,
                            book_id = 2,
                            author_order = "",
                            royality_percentage = 25
                        });
                });

            modelBuilder.Entity("BusinessObject.Publisher", b =>
                {
                    b.Property<int>("pub_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pub_id"), 1L, 1);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pub_id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            pub_id = 1,
                            city = "London",
                            country = "England",
                            publisher_name = "Hoyoverse",
                            state = ""
                        },
                        new
                        {
                            pub_id = 2,
                            city = "Ho Chi Minh",
                            country = "Viet Nam",
                            publisher_name = "Arknights",
                            state = ""
                        });
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"), 1L, 1);

                    b.Property<string>("role_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            role_desc = "Administrator"
                        },
                        new
                        {
                            role_id = 2,
                            role_desc = "Member"
                        });
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<string>("email_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pub_id")
                        .HasColumnType("int");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<string>("source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.HasIndex("pub_id");

                    b.HasIndex("role_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            email_address = "member1@gmail.com",
                            first_name = "Hao",
                            last_name = "Nam",
                            password = "1",
                            pub_id = 1,
                            role_id = 2,
                            source = "Member1SourceLink.com"
                        },
                        new
                        {
                            user_id = 2,
                            email_address = "member2@gmail.com",
                            first_name = "Lien",
                            last_name = "Huong",
                            password = "2",
                            pub_id = 2,
                            role_id = 2,
                            source = "Member2SourceLink.com"
                        });
                });

            modelBuilder.Entity("BusinessObject.BookAuthor", b =>
                {
                    b.HasOne("BusinessObject.Author", "Author")
                        .WithOne("BookAuthor")
                        .HasForeignKey("BusinessObject.BookAuthor", "author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Book", "Book")
                        .WithMany("BookAuthor")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Publisher", "Publisher")
                        .WithMany("User")
                        .HasForeignKey("pub_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Author", b =>
                {
                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("BusinessObject.Publisher", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
